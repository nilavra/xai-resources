{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "blocked-monthly",
   "metadata": {},
   "source": [
    "# LIME interpretability for heartbeat classification with a multi-layer perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "widespread-luxury",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports:\n",
    "import numpy as np\n",
    "import glob\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from scipy import *\n",
    "import os\n",
    "import matplotlib.cm as cm\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import *\n",
    "from sklearn.preprocessing import normalize\n",
    "from sklearn.model_selection import train_test_split\n",
    "sns.set()\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "length = 277\n",
    "import lime\n",
    "import lime.lime_tabular"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "experimental-bradley",
   "metadata": {},
   "source": [
    "### Extract task-specific data and one-hot encode labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "extreme-conspiracy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading  ../mimic3-code-main/module2_week1/train_beats.csv\n",
      "Loading  ../mimic3-code-main/module2_week1/test_beats.csv\n",
      "(31912, 277)\n",
      "(37863, 277)\n"
     ]
    }
   ],
   "source": [
    "# Load the training and testing data:\n",
    "train_values = np.empty(shape=[0, length])\n",
    "test_values = np.empty(shape=[0, length])\n",
    "\n",
    "train_beats = glob.glob('./train_beats.csv')\n",
    "test_beats = glob.glob('./test_beats.csv')\n",
    "\n",
    "for j in train_beats:\n",
    "    print('Loading ', j)\n",
    "    csvrows = np.loadtxt(j, delimiter=',')\n",
    "    train_values = np.append(train_values, csvrows, axis=0)\n",
    "\n",
    "for j in test_beats:\n",
    "    print('Loading ', j)\n",
    "    csvrows = np.loadtxt(j, delimiter=',')\n",
    "    test_values = np.append(test_values, csvrows, axis=0)\n",
    "    \n",
    "print(train_values.shape)\n",
    "print(test_values.shape)\n",
    "\n",
    "# Separate the training and testing data, and one-hot encode Y:\n",
    "X_train = train_values[:,:-2]\n",
    "X_test = test_values[:,:-2]\n",
    "\n",
    "y_train = train_values[:,-2]\n",
    "y_test = test_values[:,-2]\n",
    "\n",
    "y_train = to_categorical(y_train)\n",
    "y_test = to_categorical(y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dying-machinery",
   "metadata": {},
   "source": [
    "### Build the multi-layer perceptron architecture and train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "driving-ability",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build a multi-layer perceptron:\n",
    "def getModel():\n",
    "    mlpmodel = Sequential()\n",
    "    mlpmodel.add(Dense(100, activation = 'relu'))\n",
    "    mlpmodel.add(Dense(9, activation = 'softmax'))\n",
    "    return mlpmodel\n",
    "\n",
    "mlpmodel = getModel()\n",
    "mlpmodel.compile(optimizer = 'adam', loss = tf.keras.losses.CategoricalCrossentropy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "polar-beatles",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "998/998 [==============================] - 1s 477us/step - loss: 0.4178\n",
      "Epoch 2/100\n",
      "998/998 [==============================] - 0s 470us/step - loss: 0.1992\n",
      "Epoch 3/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.1551\n",
      "Epoch 4/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.1325\n",
      "Epoch 5/100\n",
      "998/998 [==============================] - 0s 453us/step - loss: 0.1161\n",
      "Epoch 6/100\n",
      "998/998 [==============================] - 0s 481us/step - loss: 0.1021\n",
      "Epoch 7/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0933\n",
      "Epoch 8/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0855\n",
      "Epoch 9/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0814\n",
      "Epoch 10/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0752\n",
      "Epoch 11/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0700\n",
      "Epoch 12/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0677\n",
      "Epoch 13/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0626\n",
      "Epoch 14/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0597\n",
      "Epoch 15/100\n",
      "998/998 [==============================] - 0s 456us/step - loss: 0.0592\n",
      "Epoch 16/100\n",
      "998/998 [==============================] - 0s 468us/step - loss: 0.0561\n",
      "Epoch 17/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0542\n",
      "Epoch 18/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0515\n",
      "Epoch 19/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0478\n",
      "Epoch 20/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0478\n",
      "Epoch 21/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0477\n",
      "Epoch 22/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0430\n",
      "Epoch 23/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0423\n",
      "Epoch 24/100\n",
      "998/998 [==============================] - 0s 469us/step - loss: 0.0408\n",
      "Epoch 25/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0402\n",
      "Epoch 26/100\n",
      "998/998 [==============================] - 0s 467us/step - loss: 0.0381\n",
      "Epoch 27/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0384\n",
      "Epoch 28/100\n",
      "998/998 [==============================] - 0s 466us/step - loss: 0.0390\n",
      "Epoch 29/100\n",
      "998/998 [==============================] - 0s 470us/step - loss: 0.0353\n",
      "Epoch 30/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0341\n",
      "Epoch 31/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0345\n",
      "Epoch 32/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0334\n",
      "Epoch 33/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0317\n",
      "Epoch 34/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0314\n",
      "Epoch 35/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0321\n",
      "Epoch 36/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0299\n",
      "Epoch 37/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0278\n",
      "Epoch 38/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0313\n",
      "Epoch 39/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0304\n",
      "Epoch 40/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0294\n",
      "Epoch 41/100\n",
      "998/998 [==============================] - 0s 453us/step - loss: 0.0271\n",
      "Epoch 42/100\n",
      "998/998 [==============================] - 0s 452us/step - loss: 0.0274\n",
      "Epoch 43/100\n",
      "998/998 [==============================] - 0s 472us/step - loss: 0.0262\n",
      "Epoch 44/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0248\n",
      "Epoch 45/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0254\n",
      "Epoch 46/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0225\n",
      "Epoch 47/100\n",
      "998/998 [==============================] - 0s 452us/step - loss: 0.0246\n",
      "Epoch 48/100\n",
      "998/998 [==============================] - 0s 476us/step - loss: 0.0274\n",
      "Epoch 49/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0209\n",
      "Epoch 50/100\n",
      "998/998 [==============================] - 0s 465us/step - loss: 0.0245\n",
      "Epoch 51/100\n",
      "998/998 [==============================] - 0s 474us/step - loss: 0.0217\n",
      "Epoch 52/100\n",
      "998/998 [==============================] - 0s 467us/step - loss: 0.0226\n",
      "Epoch 53/100\n",
      "998/998 [==============================] - 0s 468us/step - loss: 0.0237\n",
      "Epoch 54/100\n",
      "998/998 [==============================] - 0s 465us/step - loss: 0.0216\n",
      "Epoch 55/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0217\n",
      "Epoch 56/100\n",
      "998/998 [==============================] - 0s 498us/step - loss: 0.0234\n",
      "Epoch 57/100\n",
      "998/998 [==============================] - 0s 458us/step - loss: 0.0194\n",
      "Epoch 58/100\n",
      "998/998 [==============================] - 1s 522us/step - loss: 0.0154\n",
      "Epoch 59/100\n",
      "998/998 [==============================] - 0s 487us/step - loss: 0.0254\n",
      "Epoch 60/100\n",
      "998/998 [==============================] - 0s 450us/step - loss: 0.0196\n",
      "Epoch 61/100\n",
      "998/998 [==============================] - 0s 469us/step - loss: 0.0212\n",
      "Epoch 62/100\n",
      "998/998 [==============================] - 0s 461us/step - loss: 0.0183\n",
      "Epoch 63/100\n",
      "998/998 [==============================] - 0s 456us/step - loss: 0.0164\n",
      "Epoch 64/100\n",
      "998/998 [==============================] - 0s 466us/step - loss: 0.0213\n",
      "Epoch 65/100\n",
      "998/998 [==============================] - 0s 459us/step - loss: 0.0215\n",
      "Epoch 66/100\n",
      "998/998 [==============================] - 0s 453us/step - loss: 0.0150\n",
      "Epoch 67/100\n",
      "998/998 [==============================] - 0s 483us/step - loss: 0.0203\n",
      "Epoch 68/100\n",
      "998/998 [==============================] - 0s 481us/step - loss: 0.0178\n",
      "Epoch 69/100\n",
      "998/998 [==============================] - 0s 467us/step - loss: 0.0207\n",
      "Epoch 70/100\n",
      "998/998 [==============================] - 0s 499us/step - loss: 0.0149\n",
      "Epoch 71/100\n",
      "998/998 [==============================] - 0s 483us/step - loss: 0.0203\n",
      "Epoch 72/100\n",
      "998/998 [==============================] - 0s 465us/step - loss: 0.0169\n",
      "Epoch 73/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0175\n",
      "Epoch 74/100\n",
      "998/998 [==============================] - 0s 458us/step - loss: 0.0198\n",
      "Epoch 75/100\n",
      "998/998 [==============================] - 0s 469us/step - loss: 0.0153\n",
      "Epoch 76/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0192\n",
      "Epoch 77/100\n",
      "998/998 [==============================] - 0s 472us/step - loss: 0.0143\n",
      "Epoch 78/100\n",
      "998/998 [==============================] - 0s 467us/step - loss: 0.0162\n",
      "Epoch 79/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0174\n",
      "Epoch 80/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0155\n",
      "Epoch 81/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0205\n",
      "Epoch 82/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0144\n",
      "Epoch 83/100\n",
      "998/998 [==============================] - 0s 463us/step - loss: 0.0166\n",
      "Epoch 84/100\n",
      "998/998 [==============================] - 0s 467us/step - loss: 0.0182\n",
      "Epoch 85/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0151\n",
      "Epoch 86/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0187\n",
      "Epoch 87/100\n",
      "998/998 [==============================] - 0s 460us/step - loss: 0.0160\n",
      "Epoch 88/100\n",
      "998/998 [==============================] - 0s 472us/step - loss: 0.0143\n",
      "Epoch 89/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0164\n",
      "Epoch 90/100\n",
      "998/998 [==============================] - 0s 459us/step - loss: 0.0143\n",
      "Epoch 91/100\n",
      "998/998 [==============================] - 0s 473us/step - loss: 0.0147\n",
      "Epoch 92/100\n",
      "998/998 [==============================] - 0s 466us/step - loss: 0.0150\n",
      "Epoch 93/100\n",
      "998/998 [==============================] - 0s 449us/step - loss: 0.0143\n",
      "Epoch 94/100\n",
      "998/998 [==============================] - 0s 475us/step - loss: 0.0169\n",
      "Epoch 95/100\n",
      "998/998 [==============================] - 0s 469us/step - loss: 0.0144\n",
      "Epoch 96/100\n",
      "998/998 [==============================] - 0s 466us/step - loss: 0.0141\n",
      "Epoch 97/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "998/998 [==============================] - 0s 453us/step - loss: 0.0171\n",
      "Epoch 98/100\n",
      "998/998 [==============================] - 0s 478us/step - loss: 0.0131\n",
      "Epoch 99/100\n",
      "998/998 [==============================] - 0s 462us/step - loss: 0.0135\n",
      "Epoch 100/100\n",
      "998/998 [==============================] - 0s 464us/step - loss: 0.0148\n"
     ]
    }
   ],
   "source": [
    "# Fit the model:\n",
    "mlphistory = mlpmodel.fit(X_train, y_train, epochs = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "imperial-consortium",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model so we can visualize it with Netron (https://github.com/lutzroeder/netron):\n",
    "tf.keras.models.save_model(mlpmodel, 'mlpmodel_lime_ecg.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "alert-classroom",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 100)               27600     \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 9)                 909       \n",
      "=================================================================\n",
      "Total params: 28,509\n",
      "Trainable params: 28,509\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Visualize the model:\n",
    "mlpmodel.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "mobile-fossil",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9465705305971529"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make a prediction and show the accuracy:\n",
    "pred = mlpmodel.predict(X_test)\n",
    "accuracy_score(np.argmax(y_test, axis = 1), np.argmax(pred, axis = 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "potential-recording",
   "metadata": {},
   "source": [
    "### Create the explainer and explain an instance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "hybrid-continent",
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = lime.lime_tabular.LimeTabularExplainer(X_train, discretize_continuous = True)\n",
    "exp = explainer.explain_instance(X_test[50], mlpmodel.predict, labels = [np.argmax(y_test[50])], num_features = 275)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "supported-grenada",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the weights for all features:\n",
    "map_explanation = exp.as_map()[np.argmax(y_test[50])]\n",
    "features, weights = [], []\n",
    "for e in map_explanation:\n",
    "    features.append(e[0])\n",
    "    weights.append(e[1])\n",
    "features = np.array(features)\n",
    "weights = np.array(weights)\n",
    "\n",
    "# Sort based on features:\n",
    "indices_sort = np.argsort(features)\n",
    "features = features[indices_sort]\n",
    "weights = weights[indices_sort]\n",
    "\n",
    "# Average over the actual variables:\n",
    "mean_weights = np.zeros((11, ))\n",
    "for i in range(0, 275, 25):\n",
    "    mean_weights[i // 25] = np.mean(weights[i:i+25])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "handy-celebration",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sort based on weight:\n",
    "indices_sort = np.argsort(-1 * mean_weights)\n",
    "slices = np.arange(1, 12)\n",
    "\n",
    "# Visualize:\n",
    "fig, ax = plt.subplots(1, 2, figsize = (15, 4))\n",
    "ax[0].bar(range(11), mean_weights[indices_sort])\n",
    "ax[0].set_title('LIME weights for classifying instance of class ' + str(np.argmax(y_test[50])) + ' with an MLP')\n",
    "ax[0].set_xticks(np.arange(11))\n",
    "ax[0].set_xticklabels(slices[indices_sort])\n",
    "ax[0].set_ylabel('LIME weight')\n",
    "ax[0].set_xlabel('Segment')\n",
    "\n",
    "ecg_normalized = (X_test[50, :] - X_test[50, :].min()) / (X_test[50, :].max() - X_test[50, :].min())\n",
    "ax[1].plot(np.arange(275), ecg_normalized, label = 'ECG instance')\n",
    "ax[1].plot(np.repeat(mean_weights * 100, 25), label = 'LIME weight')\n",
    "ax[1].set_title('LIME weights for classifying instance of class ' + str(np.argmax(y_test[50])) + ' with an MLP')\n",
    "ax[1].set_ylabel('ECG signal / LIME weights')\n",
    "ax[1].set_xlabel('Time')\n",
    "ax[1].legend()\n",
    "plt.savefig('lime_weights_x50_MLP.jpg', dpi = 400)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "vital-security",
   "metadata": {},
   "source": [
    "### Explain another instance of another class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "residential-knock",
   "metadata": {},
   "outputs": [],
   "source": [
    "exp = explainer.explain_instance(X_test[100], mlpmodel.predict, labels = [np.argmax(y_test[100])], num_features = 275)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "enabling-pasta",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the weights for all features:\n",
    "map_explanation = exp.as_map()[np.argmax(y_test[100])]\n",
    "features, weights = [], []\n",
    "for e in map_explanation:\n",
    "    features.append(e[0])\n",
    "    weights.append(e[1])\n",
    "features = np.array(features)\n",
    "weights = np.array(weights)\n",
    "\n",
    "# Sort based on features:\n",
    "indices_sort = np.argsort(features)\n",
    "features = features[indices_sort]\n",
    "weights = weights[indices_sort]\n",
    "\n",
    "# Average over the actual variables:\n",
    "mean_weights = np.zeros((11, ))\n",
    "for i in range(0, 275, 25):\n",
    "    mean_weights[i // 25] = np.mean(weights[i:i+25])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "unavailable-spectacular",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sort based on weight:\n",
    "indices_sort = np.argsort(-1 * mean_weights)\n",
    "slices = np.arange(1, 12)\n",
    "\n",
    "# Visualize:\n",
    "fig, ax = plt.subplots(1, 2, figsize = (15, 4))\n",
    "ax[0].bar(range(11), mean_weights[indices_sort])\n",
    "ax[0].set_title('LIME weights for classifying instance of class ' + str(np.argmax(y_test[100])) + ' with an MLP')\n",
    "ax[0].set_xticks(np.arange(11))\n",
    "ax[0].set_xticklabels(slices[indices_sort])\n",
    "ax[0].set_ylabel('LIME weight')\n",
    "ax[0].set_xlabel('Segment')\n",
    "\n",
    "ecg_normalized = (X_test[100, :] - X_test[100, :].min()) / (X_test[100, :].max() - X_test[100, :].min())\n",
    "ax[1].plot(np.arange(275), ecg_normalized, label = 'ECG instance')\n",
    "ax[1].plot(np.repeat(mean_weights * 100, 25), label = 'LIME weight')\n",
    "ax[1].set_title('LIME weights for classifying instance of class ' + str(np.argmax(y_test[100])) + ' with an MLP')\n",
    "ax[1].set_ylabel('ECG signal / LIME weights')\n",
    "ax[1].set_xlabel('Time')\n",
    "ax[1].legend()\n",
    "plt.savefig('lime_weights_x100_MLP.jpg', dpi = 400)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
